#ifndef __TASK_CUSTOMER_ENQUEUE    // header files should include guards
#define __TASK_CUSTOMER_ENQUEUE

#include "cmsis_os.h"
#include "string.h"
#include "queue.h"

#include "main.h"
#include "Customer.h"

typedef struct {
	// Generated by FreeRTOS, saved for later use (task synchronization, etc.)
  TaskHandle_t handle; 
  char task_name[16];
	
	// A pointer to main's simulation clock. How many seconds has passed since 9am (program beginning). 
	uint32_t* SimulationClockPtr;
	
	// A pointer to the list of all customers
	Customer* CustomerPtr;
	
	// A pointer to the size of the list of all customers
	uint16_t* CustomerPtrSize;
	
	// A pointer to the queue of all customers in the queue
	QueueHandle_t* CustomerQueuePtr;

	// A pointer to main's MaxCustomerQueueCnt.
	uint32_t* MaximumCustomerQueueCntPtr;	
	
	// A pointer to main's NextCustomertTime.
	uint32_t* NextCustomerTimePtr;	
	
} CUSTOMERENQUEUE_PARAMS_t;
	

extern CUSTOMERENQUEUE_PARAMS_t customer_enqueue_params; // defined here, allocated in led_task.c

void customer_enqueue_task(void *parameters);
void customer_enqueue_task_init(char *customer_enqueue_task_name,
																uint32_t* simulation_clock_ptr,
																Customer* customer_ptr,
																uint16_t* customer_ptr_size,
																QueueHandle_t* customer_queue_ptr,
																uint32_t* maximum_customer_queue_cnt_ptr,
																uint32_t* next_customer_time_ptr
);


/*
	Checks if the current simulated time is between bank operating hours (9 to 4)
		and if so, checks if the Next Customer Time has elapsed. If so, return true (1);
		if not, return 0.
*/
uint8_t CanNextCustomerBeQueued();


/*
	Creates a new customer. Set it's start time to current simulated time.
	Adds this new customer to the customer queue 
		Updates the maximum customer queue count if larger. 
	Adds this new customer to the list of all customers.
		Updates the size of the list of all 
*/
void AddCustomer();

#endif
